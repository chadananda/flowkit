/**
 * article-generator.js - An advanced article generation system using Flowkit
 * 
 * This example demonstrates a complete article generation workflow:
 * 1. Topic analysis and planning
 * 2. Research using Perplexity API
 * 3. Content outline creation
 * 4. Article drafting with Claude 3.7
 * 5. Multiple editing passes (readability, SEO)
 * 6. Final review and output
 * 
 * It also showcases the onPrompt feature for conditional branching based on LLM evaluation.
 */

import { Flow, registerTool } from '../../flowkit.js';
import { callLLM, promptTemplate, jsonParser, textChunker } from '../../tools.js';
import { createMemoryStore } from '../../memory.js';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Create a memory store for the article generation process
const articleMemory = createMemoryStore();

// Register tools for the article generation process
const researchWithPerplexity = registerTool(
  async (query, maxResults = 3) => {
    console.log(`🔍 Researching: ${query}`);
    
    // In a real implementation, you would use the Perplexity API
    // This is a simulated version for demonstration purposes
    const simulatePerplexityAPI = async (query) => {
      console.log('Simulating Perplexity API call...');
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      return {
        query,
        results: [
          {
            title: `Information about ${query}`,
            snippet: `This is simulated research data about ${query}. In a real implementation, this would contain actual information from Perplexity's API.`,
            source: 'simulated-source.com'
          },
          {
            title: `More details on ${query}`,
            snippet: `Additional simulated research data about ${query}. This would contain facts, statistics, and relevant information from reliable sources.`,
            source: 'simulated-research.org'
          },
          {
            title: `Expert analysis of ${query}`,
            snippet: `Expert opinions and analysis about ${query}. This would include quotes from authorities in the field and recent developments.`,
            source: 'simulated-experts.edu'
          }
        ]
      };
    };
    
    // Call the simulated API
    const researchData = await simulatePerplexityAPI(query);
    
    // Store the research results in memory
    const existingResearch = articleMemory('research') || [];
    articleMemory('research', [...existingResearch, researchData]);
    
    return researchData;
  },
  {
    name: 'researchWithPerplexity',
    description: 'Research a topic using Perplexity',
    parameters: ['query', 'maxResults?']
  }
);

const writeWithClaude = registerTool(
  async (prompt, model = 'claude-3-7-sonnet', temperature = 0.7) => {
    console.log(`✍️ Writing with ${model}...`);
    
    // In a real implementation, you would use the Anthropic API
    // This is a simulated version for demonstration purposes
    const simulateClaudeAPI = async (prompt, model, temperature) => {
      console.log(`Simulating ${model} API call with temperature ${temperature}...`);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      return `This is simulated content generated by ${model} based on the prompt: "${prompt.substring(0, 50)}...". 
In a real implementation, this would be high-quality content from Claude 3.7.`;
    };
    
    // Call the simulated API
    return await simulateClaudeAPI(prompt, model, temperature);
  },
  {
    name: 'writeWithClaude',
    description: 'Generate content using Claude AI',
    parameters: ['prompt', 'model?', 'temperature?']
  }
);

const saveToFile = registerTool(
  async (content, filePath) => {
    try {
      // Ensure the directory exists
      const directory = path.dirname(filePath);
      await fs.mkdir(directory, { recursive: true });
      
      // Write the content to the file
      await fs.writeFile(filePath, content);
      console.log(`📄 Saved to ${filePath}`);
      return { success: true, filePath };
    } catch (error) {
      console.error(`Error saving file: ${error.message}`);
      return { success: false, error: error.message };
    }
  },
  {
    name: 'saveToFile',
    description: 'Save content to a file',
    parameters: ['content', 'filePath']
  }
);

// Define the article generation flow nodes

// 1. Analyze the topic and create a plan
const analyzeTopic = async (state) => {
  console.log('📊 Analyzing topic and creating a plan...');
  
  const prompt = promptTemplate(`
You are an expert content strategist. Analyze the following topic and create a detailed plan for an article.

Topic: {{topic}}
Target Audience: {{audience}}
Keywords: {{keywords}}

Please provide a structured plan that includes:
1. A compelling headline
2. 3-5 key research questions to investigate
3. A suggested structure with sections
4. Key points to cover in each section

Respond in JSON format:
{
  "headline": "The main headline for the article",
  "researchQuestions": ["Question 1", "Question 2", "Question 3"],
  "structure": [
    {"section": "Introduction", "keyPoints": ["Point 1", "Point 2"]},
    {"section": "Section 1", "keyPoints": ["Point 1", "Point 2"]}
  ]
}
`, {
    topic: state.topic,
    audience: state.audience || 'General readers',
    keywords: state.keywords ? state.keywords.join(', ') : 'No specific keywords'
  });
  
  const planResponse = await callLLM({
    prompt,
    model: 'gpt-4',
    temperature: 0.7,
    schema: {
      headline: 'string',
      researchQuestions: 'array',
      structure: 'array'
    }
  });
  
  // Store the plan in memory
  articleMemory('plan', planResponse);
  
  return {
    ...state,
    plan: planResponse
  };
};

// 2. Conduct research based on the plan
const conductResearch = async (state) => {
  console.log('🔍 Conducting research based on the plan...');
  
  const { plan } = state;
  const researchResults = [];
  
  // Research the main topic
  const mainResearch = await researchWithPerplexity(state.topic);
  researchResults.push(mainResearch);
  
  // Research each question from the plan
  for (const question of plan.researchQuestions) {
    const result = await researchWithPerplexity(question);
    researchResults.push(result);
  }
  
  return {
    ...state,
    research: researchResults
  };
};

// 3. Create a detailed outline based on research
const createOutline = async (state) => {
  console.log('📝 Creating detailed outline based on research...');
  
  const { plan, research } = state;
  
  // Combine all research results into a single text
  const researchText = research
    .flatMap(r => r.results)
    .map(item => `${item.title}: ${item.snippet} (Source: ${item.source})`)
    .join('\n\n');
  
  const prompt = promptTemplate(`
You are an expert content outliner. Create a detailed outline for an article based on the following plan and research.

Headline: {{headline}}

Article Structure:
{{structure}}

Research Data:
{{research}}

Create a comprehensive outline with:
1. Introduction with hook and thesis
2. Detailed sections with subheadings
3. Key points for each section with supporting evidence from research
4. Conclusion with key takeaways

Respond in JSON format:
{
  "headline": "Final headline",
  "outline": [
    {
      "section": "Section name",
      "subheadings": ["Subheading 1", "Subheading 2"],
      "content": ["Point 1 with evidence", "Point 2 with evidence"]
    }
  ]
}
`, {
    headline: plan.headline,
    structure: JSON.stringify(plan.structure, null, 2),
    research: researchText
  });
  
  const outlineResponse = await callLLM({
    prompt,
    model: 'gpt-4',
    temperature: 0.7,
    schema: {
      headline: 'string',
      outline: 'array'
    }
  });
  
  // Store the outline in memory
  articleMemory('outline', outlineResponse);
  
  return {
    ...state,
    outline: outlineResponse
  };
};

// 4. Draft the article with Claude 3.7
const draftArticle = async (state) => {
  console.log('✍️ Drafting article with Claude 3.7...');
  
  const { outline, topic, keywords } = state;
  
  const prompt = `
You are an expert content writer. Write a comprehensive article based on the following outline.

Topic: ${topic}
Keywords to include: ${keywords ? keywords.join(', ') : 'No specific keywords'}
Headline: ${outline.headline}

Detailed Outline:
${JSON.stringify(outline.outline, null, 2)}

Write a complete article that:
1. Has an engaging introduction with a hook
2. Follows the outline structure precisely
3. Includes all key points with supporting evidence
4. Naturally incorporates the keywords
5. Has a strong conclusion with key takeaways
6. Uses a professional but conversational tone
7. Is well-formatted with appropriate headings and subheadings

The article should be comprehensive and informative.
`;
  
  const draftContent = await writeWithClaude(prompt, 'claude-3-7-sonnet', 0.7);
  
  // Store the draft in memory
  articleMemory('draft', draftContent);
  
  return {
    ...state,
    draft: draftContent
  };
};

// 5. Edit for readability
const editForReadability = async (state) => {
  console.log('📖 Editing for readability...');
  
  const { draft } = state;
  
  const prompt = `
You are an expert copy editor. Edit the following article draft to improve readability and flow.

Focus on:
1. Simplifying complex sentences
2. Improving transitions between paragraphs
3. Ensuring a consistent tone throughout
4. Breaking up long paragraphs
5. Making the content engaging and easy to read

Here is the draft:
${draft}

Provide the improved version of the article.
`;
  
  const readabilityEdit = await writeWithClaude(prompt, 'claude-3-7-sonnet', 0.5);
  
  // Store the readability edit in memory
  articleMemory('readabilityEdit', readabilityEdit);
  
  return {
    ...state,
    readabilityEdit
  };
};

// 6. Edit for SEO
const editForSEO = async (state) => {
  console.log('🔍 Optimizing for SEO...');
  
  const { readabilityEdit, keywords } = state;
  
  const prompt = `
You are an SEO expert. Optimize the following article for search engines without compromising readability.

Keywords to include: ${keywords ? keywords.join(', ') : 'No specific keywords'}

Focus on:
1. Ensuring keywords are used naturally throughout the content
2. Optimizing headings and subheadings to include keywords where appropriate
3. Adding relevant internal linking suggestions (in [brackets])
4. Ensuring proper heading hierarchy (H1, H2, H3)
5. Suggesting meta description and title tags

Here is the article:
${readabilityEdit}

Provide the SEO-optimized version of the article, along with suggested meta title and description.
`;
  
  const seoEdit = await writeWithClaude(prompt, 'claude-3-7-sonnet', 0.5);
  
  // Store the SEO edit in memory
  articleMemory('seoEdit', seoEdit);
  
  return {
    ...state,
    seoEdit
  };
};

// 7. Final review - using onPrompt for conditional branching
const finalReview = async (state) => {
  console.log('🔍 Conducting final review...');
  
  const { seoEdit, topic, keywords } = state;
  
  const prompt = `
You are a content quality assurance specialist. Review the following article and provide a detailed assessment.

Topic: ${topic}
Keywords: ${keywords ? keywords.join(', ') : 'No specific keywords'}

Article:
${seoEdit}

Provide a detailed assessment of:
1. Overall quality and completeness
2. Accuracy of information
3. Keyword usage and SEO optimization
4. Readability and engagement
5. Any issues or areas for improvement

Your assessment:
`;
  
  const review = await writeWithClaude(prompt, 'claude-3-7-sonnet', 0.5);
  
  // Store the review in memory
  articleMemory('review', review);
  
  return {
    ...state,
    review,
    finalContent: seoEdit
  };
};

// 8A. Save the article (if review is positive)
const saveArticle = async (state) => {
  console.log('💾 Saving the final article...');
  
  const { finalContent, topic } = state;
  
  // Create a filename based on the topic
  const filename = topic.toLowerCase().replace(/[^a-z0-9]+/g, '-') + '.md';
  const filePath = path.join('output', filename);
  
  // Save the content to a file
  const saveResult = await saveToFile(finalContent, filePath);
  
  return {
    ...state,
    saveResult,
    status: 'completed',
    message: `Article saved successfully to ${filePath}`
  };
};

// 8B. Revise the article (if review is negative)
const reviseArticle = async (state) => {
  console.log('✏️ Revising the article based on review...');
  
  const { seoEdit, review, topic, keywords } = state;
  
  const prompt = `
You are an expert content reviser. Revise the following article based on the review feedback.

Topic: ${topic}
Keywords: ${keywords ? keywords.join(', ') : 'No specific keywords'}

Original Article:
${seoEdit}

Review Feedback:
${review}

Please revise the article to address all the issues mentioned in the review.
Focus on improving the overall quality, accuracy, readability, and SEO optimization.

Provide the revised version of the article.
`;
  
  const revisedContent = await writeWithClaude(prompt, 'claude-3-7-sonnet', 0.7);
  
  // Store the revised content in memory
  articleMemory('revisedContent', revisedContent);
  
  return {
    ...state,
    finalContent: revisedContent,
    status: 'revised',
    message: 'Article revised based on review feedback'
  };
};

// Create the article generation flow
const articleFlow = Flow.start(analyzeTopic)
  .next(conductResearch)
  .next(createOutline)
  .next(draftArticle)
  .next(editForReadability)
  .next(editForSEO)
  .next(finalReview)
  .onPrompt(
    // This is where we use the new onPrompt feature
    // The prompt asks if the review is positive enough to publish
    `
    Based on the review, is the article of sufficient quality to publish without further revisions?
    Consider factors like accuracy, completeness, readability, and SEO optimization.
    Answer true if the article is ready to publish, or false if it needs revision.
    `,
    saveArticle,    // Execute if the LLM returns true
    reviseArticle   // Execute if the LLM returns false
  );

// Function to run the article generation process
const generateArticle = async (topic, audience, keywords) => {
  console.log(`🚀 Starting article generation for topic: ${topic}`);
  
  try {
    // Create output directory if it doesn't exist
    await fs.mkdir('output', { recursive: true });
    
    // Run the article generation flow
    const result = await articleFlow.run({
      topic,
      audience,
      keywords
    });
    
    console.log(`✅ Article generation ${result.status}: ${result.message}`);
    return result;
  } catch (error) {
    console.error(`❌ Error generating article: ${error.message}`);
    throw error;
  }
};

// Example usage
const runExample = async () => {
  const topic = "The Impact of Artificial Intelligence on Content Creation";
  const audience = "Marketing professionals and content creators";
  const keywords = ["AI content creation", "content automation", "AI writing tools", "future of content marketing"];
  
  await generateArticle(topic, audience, keywords);
};

// Check if this file is being run directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runExample().catch(console.error);
}

export { generateArticle, articleFlow };
